(()=>{class t extends HTMLImageElement{static getIntersectionObserver(){return t.intersectionObserver||(t.intersectionObserver=new IntersectionObserver(e=>{e.filter(t=>t.isIntersecting).forEach(e=>{e.target.load(),t.intersectionObserver.unobserve(e.target)})})),t.intersectionObserver}static observe(e){if("IntersectionObserver"in window&&"IntersectionObserverEntry"in window&&"intersectionRatio"in window.IntersectionObserverEntry.prototype){t.getIntersectionObserver().observe(e)}else e.load(),t.observe=(t=>t.load())}connectedCallback(){this.setAttribute("is","progressive-image");const e=(t,e)=>{this.src=t,this.srcset=e,this.addEventListener("load",()=>{this.setAttribute("data-state","clear"),setTimeout(()=>this.removeAttribute("data-state"),1e3),this.style.backgroundImage=""},{once:!0})},s=(t,s,r)=>{const i=new Image;i.onload=(()=>{this.style.backgroundImage=`url(${r})`,this.setAttribute("data-state","blur"),e(t,s)}),i.src=r},r=this.getAttribute("data-blurry-src"),{src:i,srcset:n}=this;this.load=(()=>r?s(i,n,r):e(i,n)),t.observe(this),this.removeAttribute("srcset");const o=this.getAttribute("width"),a=this.getAttribute("height");this.src=`data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${o} ${a}"%3E%3C/svg%3E`,this.setAttribute("data-state","loading")}}customElements.define("progressive-image",t,{extends:"img"})})();